<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 盒木</title>
    <link>https://kingsqiu.github.io/post/</link>
    <description>Recent content in Posts on 盒木</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 11 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kingsqiu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>B站直播教程</title>
      <link>https://kingsqiu.github.io/p/coffee-machine/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingsqiu.github.io/p/coffee-machine/</guid>
      <description>直播软件：
直播间美化平台：
虚拟偶像动捕设备和软件：</description>
    </item>
    
    <item>
      <title>咖啡机的原理</title>
      <link>https://kingsqiu.github.io/p/coffee-machine/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingsqiu.github.io/p/coffee-machine/</guid>
      <description></description>
    </item>
    
    <item>
      <title>常见的黑盒测试方法</title>
      <link>https://kingsqiu.github.io/p/black_box/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingsqiu.github.io/p/black_box/</guid>
      <description>编写测试用例，都有哪些可以参考的呢？
 需求文档 积极与开发、产品、客户进行沟通 开发（设计）文档，当然，有可能也拿不到，比如说开发和测试分属不同的公司，人家开发就不一定提供文档。 被测系统（已经开发出来的被测系统），一边对照程序，一边编写用例，很多企业都采用这种方式，如果只对照需求文档可能仅能完成测试的30~40%。  在编写黑盒测试用例的时候，我们可以有以下几种形式来完成：
 等价类划分法 边界值法 场景法 因果图法 判定表法 正交（排列）法 测试大纲法  等价类划分法 等价类划分法是一种重要的、常用的黑盒测试方法，无需考虑程序的内部结构，只需要考虑程序的输入规格即可，它将不能穷举的测试过程进行合理的分类，划分为了若干份（或称为不同的子集），然后从每个子集中选取少数具有代表性的数据作为测试用例从而保证设计出来的测试用例具有完整性和代表性。
等价类划分分为（基本概念）：
 有效等价类，指符合《需求规格说明书》，输入合理的数据集合。 无效等价类，指不符合《需求规格说明书》，输入不合理的数据集合。  等价类思考步骤：
 首先确定有效等价类和无效等价类 有效等价类就是一目了然的题目条件（比如在0~20之间测试），要考虑到两端的极值（边界值）和中间值。 无效等价类先划分与条件相反的情况（比如不在0~20范围内），再去找特殊情况，如中英文，符号、空格、空等。  等价类划分发的测试思想
 穷举测试：把所有可能的数据全部测试一遍称为穷举测试，虽然穷举测试是最全面的测试，但是很明显不现实，因为测试效率太低了，数据量巨大，根本测不过来（思考前面计算器的例子）。但又因为没有做过穷举测试，所以会有遗漏缺陷的风险，如果时间允许，尽可能的做补充测试（觉得有风险有问题的做补充测试）。 理想的测试思想，使用最少的测试数据，达到最好的测试质量。 而等价类划分法则是从大量的数据中，划分范围（或分类），每个范围内的数据测试效果是等价的，所以每个范围是一个等价类，然后从每个范围内挑选出具有代表性的数据，这些代表数据能反映这个范围内的测试结果。 等价类划分法的基本思想是：  有效等价类，对于程序来说，是有意义的，合理的输入数据集合，然后测试功能是否符合预期。 无效等价类，对于程序来说，是无意义的，不合理的输入数据集，用来测试程序是否具有强大的异常处理能力，也就是测试程序的健壮性。    边界值法 什么是边界值？
边界是指对于输入等价类和输出等价类而言，稍高于边界值和稍低于边界值的一些特定情况，边界值分析法常应用于黑盒测试中。边界值也可以称为极值。
根据以往的经验来看：大量的错误是发生在输入或者输出范围的边界上，而不是再输入范围的内部。所以，为了保证测试质量，我们需要重点关注测试边界。
有效数据和无效数据的分界点，往往作为程序员编写程序的判断点，所以，这也是程序员最容易犯错的地方（他很有可能听着歌，脑子里想着是大于小于，结果手比脑子动的快，写成小于等于等等情况），所以，边界值这里是我们测试人员重点测试的地方。
那么如何解决这类问题？
 找到测试数据的边界点，也就是有效等价类和无效等价类的边界点，对于边界点数据专门进行测试。 一般的，测试人员需要对边界值及边界值两边的数分别进行测试。  确定边界值的一般思路
 确定边界情况，也就是确定输入或者输出等价类的边界 选取正好等于、刚刚大于、刚刚小于边界值作为测试数据 边界值的取值依据输入范围区间不同而有所不同，但是都需要把上点值、离点值、和内点值取到。  边界值的方法思考：
 如果输入条件规定了范围，则应该取这个范围的边界值，比如1~100，边界值应该取0 1 100 101。 如果输入条件规定了输入值的个数。比如密码长度为8~24，边界值应该取7 8 9 23 24 25位字符来判断。 边界值和等价类的区别，边界值分析不是从等价类中随便找一个作为代表，而是整个等价类的每个边界都要作为测试条件。 边界值的思想是在结合实际环境，应该选出到边界和刚超过的值作为测试依据。边界值和等价类是相辅相成的，共同使测试用例更加完善。  常见的边界值：</description>
    </item>
    
    <item>
      <title>测试基础方法</title>
      <link>https://kingsqiu.github.io/p/test-ways/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingsqiu.github.io/p/test-ways/</guid>
      <description>黒、白、灰盒测试 黑盒测试 黑盒测试把被测对象看成一个黑匣子，只考虑期整体的特性，不考虑期内部具体实现。
黑盒测试的被测对象可以是一个系统、一个子系统、一模块、子模块、一个函数等。
黑盒测试又可以被称为基于规格的测试。
常见的黑盒测试类型：  功能性测试  一种是顺序测试每个程序特性或功能； 另一种是一个模块一个模块的测试，即每个功能在其最先调用的地方被测试；   容量测试，检测软件在处理海量数据时的局限性，能发现系统效率方面的问题。 负载测试，检测系统在短时间内处理巨大的数据量或执行许多功能调用上的能力。 恢复性测试，主要保证系统在崩溃后能回复外部数据的能力。  白盒测试 白盒测试是依据被测软件分析程序内部构造，并根据内部构造设计用例，来对内部控制流程进行测试，可完全不顾程序的整体功能实现情况。
白盒测试是基于程序结构的逻辑驱动测试。
白盒测试又可以被称为玻璃盒测试、透明盒测试、开放盒测试、结构化测试、逻辑驱动测试。
白盒测试一般在测试前期进行，通过达到一定的逻辑覆盖率指标，使得软件内部逻辑控制结构上的问题能基本得到解决。
白盒测试能保证内部逻辑结构能达到一定的覆盖程度，能够给予软件代码质量更大的保证。
白盒测试发现问题后解决问题的成本较低，毕竟介入的早嘛。
白盒测试一般会用到静态分析和动态分析两类技术，常用的有：
 静态分析：控制流分析、数据流分析、信息流分析； 动态分析：逻辑覆盖测试（分支测试、路径测试等）、程序插桩等。  白盒测试的特点  测试人员需要了解软件的实现； 可以检测代码中的每一条分支和路径； 揭示隐藏在代码代码中的错误； 对代码的测试相对彻底； 实现代码结构上的优化； 白盒测试的投入较大，成本高； 白盒测试不验证（需求）规格的正确性；  逻辑覆盖率测试 根据覆盖的对象不同，存在多种逻辑覆盖测试：
 语句覆盖； 判定覆盖； 条件覆盖； 判定-条件覆盖； 路径覆盖； 等  而逻辑覆盖率的统计是通过程序插桩来实现的。
程序插桩：程序插桩，最早是由J.C. Huang 教授提出的，它是在保证被测程序原有逻辑完整性的基础上在程序中插入一些探针（又称为“探测仪”，本质上就是进行信息采集的代码段，可以是赋值语句或采集覆盖信息的函数调用），通过探针的执行并抛出程序运行的特征数据，通过对这些数据的分析，可以获得程序的控制流和数据流信息，进而得到逻辑覆盖等动态信息，从而实现测试目的的方法。
简单来说，程序插桩就是我们在调试程序时，常常要在程序中插入一些打印语句（想想我们在程序中常用的print语句），其目的是希望在程序执行中打印出我们最为关心的信息，然后进一步通过这些信息了解程序执行过程中程序的一些动态特性。
从这一思想发展出程序插桩技术能够按照用户的要求，获取程序的各种信息，成为测试工作的有效测试手段。
灰盒测试 根据利用的被测对象的信息不同，会采用不同的方法进行测试，一般的：
 利用被测对象的整体特性信息，采用黑盒测试方法。 利用被测对象的内部具体实现信息，采用白盒测试方法。 如果既是利用被测对象的整体特性信息，又利用被测对象的内部具体实现信息，采用的就是灰盒测试方法。两种信息占比不同，相应的灰度就不同，完全是整体特性信息，就是黑盒测试，完全是内部具体实现信息，就是白盒测试。  黑、白、灰盒测试方法总结 我们一般从以下五个维度来区分：
 测试阶段不同：  单元测试阶段主要利用白盒测试方法。 集成测试阶段主要利用灰盒测试方法。 系统测试阶段主要利用黑盒测试方法。   测试依据，因为测试阶段的不同，采用的测试方法也不同，那它们的测试依据也不同：  白盒测试主要依据详细测试说明书（LLD）。 黑盒测试主要依据需求规格（设计）说明书（SRS）。 灰盒测试主要依据概要规格（设计）说明书（HLD）。   测试方法：  白盒测试方法可以有静态和动态，控制流、信息流、数据流、各种覆盖率、插桩处理。 黑盒测试方法有各种测试类型（功能型、负载、恢复性），以及应用等价类、边界值、流程图法、正交法等。 灰盒测试这里即用白盒的，也用黑盒的。   评估基准：  白盒根据逻辑覆盖率来评估。 黑盒主要看需求规格的覆盖率。 灰盒主要看接口覆盖率。   特点不一样：  白盒测试，特点是及早的发现问题，定位问题也很快，缺点是对接口、对设计、程序之间的调用、用户感受也不是很好。 黑盒解决问题的代价比较大，很大发现模块内部的问题。    静态、动态测试 软件研发可以看成是一个生产过程，在此过程中会有产品输出或者称为工件输出。</description>
    </item>
    
    <item>
      <title>使用Docker部署Go的web应用</title>
      <link>https://kingsqiu.github.io/p/docker-goweb/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingsqiu.github.io/p/docker-goweb/</guid>
      <description>Docker的必要性 适用场景：在本地开发应用程序后，有很多的依赖环境或包，甚至对依赖的具体版本都有严格的要求。当开发过程完成后，若希望将应用程序部署到web服务器。这个时候必须确保所有依赖项都安装正确并且版本也完全相同，否则应用程序可能会崩溃并无法运行。如果想在另一个web服务器上也部署该应用程序，那么必须从头开始重复这个过程。这种场景就是Docker发挥作用的地方。
对于运行应用程序的主机，不管是笔记本电脑还是web服务器，唯一需要做的就是运行一个docker容器平台。从以后，就不需要担心使用的是MacOS，Ubuntu，Arch还是其他。只需定义一次应用，即可随时随地运行。
Docker部署示例 创建Docker镜像  镜像（image）包含运行应用程序所需的所有东西——代码或二进制文件、运行时、依赖项以及所需的任何其他文件系统对象。
 或者简单地说，镜像（image）是定义应用程序及其运行所需的一切。
编写Dockerfile 要创建Docker镜像（image）必须在配置文件中指定步骤。这个文件默认为Dockerfile。（虽然这个文件名可以随意命名它，但最好还是使用默认的Dockerfile。）
具体内容如下：
FROMgolang:alpine# 为我们的镜像设置必要的环境变量ENV GO111MODULE=on \  CGO_ENABLED=0 \  GOOS=linux \  GOARCH=amd64 # 移动到工作目录：/buildWORKDIR/build# 将代码复制到容器中COPY . .# 将我们的代码编译成二进制可执行文件appRUN go build -o app .# 移动到用于存放生成的二进制文件的 /dist 目录WORKDIR/dist# 将二进制文件从 /build 目录复制到这里RUN cp /build/app .# 声明服务端口EXPOSE8888# 启动容器时运行的命令CMD [&amp;#34;/dist/app&amp;#34;]Dockerfile解析 官方文档：https://hub.docker.com/_/golang
**From：**这里使用基础镜像golang:alpine。是一个我们能够访问的存储在Docker仓库的基础镜像。这个镜像运行的是alpine Linux发行版，该发行版的大小很小并且内置了Go。
**Env：**用来设置编译阶段需要用的环境变量。
**EXPORT，CMD：**最后，声明服务端口，因为应用程序监听的是这个端口并通过这个端口对外提供服务。并且我们还定义了在我们运行镜像的时候默认执行的命令CMD [&amp;quot;/dist/app&amp;quot;]。
构建镜像 示例代码：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, hello) server := &amp;amp;http.Server{ Addr: &amp;#34;:8888&amp;#34;, } fmt.</description>
    </item>
    
    <item>
      <title>hugo博客使用笔记</title>
      <link>https://kingsqiu.github.io/p/hugo-blog-use/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingsqiu.github.io/p/hugo-blog-use/</guid>
      <description>HUGO：使用|部署 日常使用流程   在content文件夹下编辑文档
 创建MD文件 通过页面配置在开头写上必要信息 开始写博客 写完保存一下    在hugo根目录下使用hugo或hugo -D命令，生成html文件。
  将生成的HTML文件上传github
git add . git commit -m&amp;#34;update&amp;#34; #update是更新信息 git push origin main #main是仓库分支名   部署过程 安装Hugo
Windows部署
Mac部署
linux部署
安装GIT
安装主题</description>
    </item>
    
    <item>
      <title>文章配置</title>
      <link>https://kingsqiu.github.io/p/%E6%96%87%E7%AB%A0%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingsqiu.github.io/p/%E6%96%87%E7%AB%A0%E9%85%8D%E7%BD%AE/</guid>
      <description>配置变量说明官网链接： Front Matter Variables
模板  YAML, identified by ‘---’.  --- author: title: description: date: 2020-00-00 slug: image: categories: - tags: - --- （四个空格，不要用两个tab）  TOML, identified by ‘+++’.  +++ author = &amp;quot;&amp;quot; title = &amp;quot;&amp;quot; description = &amp;quot;&amp;quot; date = &amp;quot;2020-00-00&amp;quot; slug = &amp;quot;&amp;quot; image = &amp;quot;&amp;quot; categories = [ &amp;quot;&amp;quot; ] tags = [ &amp;quot;&amp;quot; ]  JSON, a single JSON object which is surrounded by ‘{’ and ‘}’, each on their own line.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kingsqiu.github.io/p/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingsqiu.github.io/p/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://kingsqiu.github.io/p/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingsqiu.github.io/p/</guid>
      <description>自媒体知识储备 视频制作</description>
    </item>
    
  </channel>
</rss>
