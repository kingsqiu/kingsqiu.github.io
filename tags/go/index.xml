<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 盒木</title>
    <link>https://kingsqiu.github.io/tags/go/</link>
    <description>Recent content in go on 盒木</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 03 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kingsqiu.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Docker部署Go的web应用</title>
      <link>https://kingsqiu.github.io/p/docker-goweb/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingsqiu.github.io/p/docker-goweb/</guid>
      <description>Docker的必要性 适用场景：在本地开发应用程序后，有很多的依赖环境或包，甚至对依赖的具体版本都有严格的要求。当开发过程完成后，若希望将应用程序部署到web服务器。这个时候必须确保所有依赖项都安装正确并且版本也完全相同，否则应用程序可能会崩溃并无法运行。如果想在另一个web服务器上也部署该应用程序，那么必须从头开始重复这个过程。这种场景就是Docker发挥作用的地方。
对于运行应用程序的主机，不管是笔记本电脑还是web服务器，唯一需要做的就是运行一个docker容器平台。从以后，就不需要担心使用的是MacOS，Ubuntu，Arch还是其他。只需定义一次应用，即可随时随地运行。
Docker部署示例 创建Docker镜像  镜像（image）包含运行应用程序所需的所有东西——代码或二进制文件、运行时、依赖项以及所需的任何其他文件系统对象。
 或者简单地说，镜像（image）是定义应用程序及其运行所需的一切。
编写Dockerfile 要创建Docker镜像（image）必须在配置文件中指定步骤。这个文件默认为Dockerfile。（虽然这个文件名可以随意命名它，但最好还是使用默认的Dockerfile。）
具体内容如下：
FROMgolang:alpine# 为我们的镜像设置必要的环境变量ENV GO111MODULE=on \  CGO_ENABLED=0 \  GOOS=linux \  GOARCH=amd64 # 移动到工作目录：/buildWORKDIR/build# 将代码复制到容器中COPY . .# 将我们的代码编译成二进制可执行文件appRUN go build -o app .# 移动到用于存放生成的二进制文件的 /dist 目录WORKDIR/dist# 将二进制文件从 /build 目录复制到这里RUN cp /build/app .# 声明服务端口EXPOSE8888# 启动容器时运行的命令CMD [&amp;#34;/dist/app&amp;#34;]Dockerfile解析 官方文档：https://hub.docker.com/_/golang
**From：**这里使用基础镜像golang:alpine。是一个我们能够访问的存储在Docker仓库的基础镜像。这个镜像运行的是alpine Linux发行版，该发行版的大小很小并且内置了Go。
**Env：**用来设置编译阶段需要用的环境变量。
**EXPORT，CMD：**最后，声明服务端口，因为应用程序监听的是这个端口并通过这个端口对外提供服务。并且我们还定义了在我们运行镜像的时候默认执行的命令CMD [&amp;quot;/dist/app&amp;quot;]。
构建镜像 示例代码：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, hello) server := &amp;amp;http.Server{ Addr: &amp;#34;:8888&amp;#34;, } fmt.</description>
    </item>
    
  </channel>
</rss>
